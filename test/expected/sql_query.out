\set ON_ERROR_STOP 1
\o /dev/null
\ir include/insert_single.sql
\set ON_ERROR_STOP 1
\ir create_single_db.sql
SET client_min_messages = WARNING;
DROP DATABASE IF EXISTS single;
SET client_min_messages = NOTICE;
CREATE DATABASE single;
\c single
CREATE EXTENSION IF NOT EXISTS iobeamdb CASCADE;
psql:include/create_single_db.sql:7: NOTICE:  installing required extension "dblink"
psql:include/create_single_db.sql:7: NOTICE:  installing required extension "postgres_fdw"
psql:include/create_single_db.sql:7: NOTICE:  installing required extension "hstore"
SELECT setup_single_node(hostname => 'fakehost'); -- fakehost makes sure there is no network connection
\c single
\set ECHO ALL
CREATE TABLE PUBLIC."testNs" (
  "timeCustom" BIGINT NOT NULL,
  device_id TEXT NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL,
  series_bool BOOLEAN NULL
);
CREATE INDEX ON PUBLIC."testNs" (device_id, "timeCustom" DESC NULLS LAST) WHERE device_id IS NOT NULL;
CREATE INDEX ON PUBLIC."testNs" ("timeCustom" DESC NULLS LAST, series_0) WHERE series_0 IS NOT NULL;
CREATE INDEX ON PUBLIC."testNs" ("timeCustom" DESC NULLS LAST, series_1)  WHERE series_1 IS NOT NULL;
CREATE INDEX ON PUBLIC."testNs" ("timeCustom" DESC NULLS LAST, series_2) WHERE series_2 IS NOT NULL;
CREATE INDEX ON PUBLIC."testNs" ("timeCustom" DESC NULLS LAST, series_bool) WHERE series_bool IS NOT NULL;
SELECT * FROM create_hypertable('"public"."testNs"', 'timeCustom', 'device_id', associated_schema_name=>'testNs' );
BEGIN;
\COPY "testNs" FROM 'data/ds1_dev1_1.tsv' NULL AS '';
COMMIT;
SELECT _iobeamdb_meta_api.close_chunk_end_immediate(c.id)
FROM get_open_partition_for_key((SELECT id FROM _iobeamdb_catalog.hypertable WHERE table_name = 'testNs'), 'dev1') part
INNER JOIN _iobeamdb_catalog.chunk c ON (c.partition_id = part.id);
INSERT INTO "testNs"("timeCustom", device_id, series_0, series_1) VALUES
(1257987600000000000, 'dev1', 1.5, 1),
(1257987600000000000, 'dev1', 1.5, 2),
(1257894000000000000, 'dev20', 1.5, 1),
(1257894002000000000, 'dev1', 2.5, 3);
INSERT INTO "testNs"("timeCustom", device_id, series_0, series_1) VALUES
(1257894000000000000, 'dev20', 1.5, 2);
CREATE TABLE chunk_closing_test(
        time       BIGINT,
        metric     INTEGER,
        device_id  TEXT
    );
-- Test chunk closing/creation
SELECT * FROM create_hypertable('chunk_closing_test', 'time', 'device_id', chunk_size_bytes => 10000);
INSERT INTO chunk_closing_test VALUES(1, 1, 'dev1');
INSERT INTO chunk_closing_test VALUES(2, 2, 'dev2');
INSERT INTO chunk_closing_test VALUES(3, 3, 'dev3');
SELECT * FROM chunk_closing_test;
SELECT * FROM _iobeamdb_catalog.chunk c
    LEFT JOIN _iobeamdb_catalog.chunk_replica_node crn ON (c.id = crn.chunk_id)
    LEFT JOIN _iobeamdb_catalog.partition_replica pr ON (crn.partition_replica_id = pr.id)
    LEFT JOIN _iobeamdb_catalog.hypertable h ON (pr.hypertable_id = h.id)
    WHERE h.schema_name = 'public' AND h.table_name = 'chunk_closing_test';
\o
\set ECHO ALL
\c single
SELECT * FROM PUBLIC."testNs";
     timeCustom      | device_id | series_0 | series_1 | series_2 | series_bool 
---------------------+-----------+----------+----------+----------+-------------
 1257894000000000000 | dev1      |      1.5 |        1 |        2 | t
 1257894000000000000 | dev1      |      1.5 |        2 |          | 
 1257894000000001000 | dev1      |      2.5 |        3 |          | 
 1257894001000000000 | dev1      |      3.5 |        4 |          | 
 1257897600000000000 | dev1      |      4.5 |        5 |          | f
 1257894000000000000 | dev20     |      1.5 |        1 |          | 
 1257894002000000000 | dev1      |      2.5 |        3 |          | 
 1257894000000000000 | dev20     |      1.5 |        2 |          | 
 1257987600000000000 | dev1      |      1.5 |        1 |          | 
 1257987600000000000 | dev1      |      1.5 |        2 |          | 
(10 rows)

EXPLAIN (verbose ON, costs off) SELECT * FROM PUBLIC."testNs";
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  Seq Scan on "testNs"._hyper_1_0_replica
         Output: _hyper_1_0_replica."timeCustom", _hyper_1_0_replica.device_id, _hyper_1_0_replica.series_0, _hyper_1_0_replica.series_1, _hyper_1_0_replica.series_2, _hyper_1_0_replica.series_bool
   ->  Seq Scan on "testNs"._hyper_1_1_0_partition
         Output: _hyper_1_1_0_partition."timeCustom", _hyper_1_1_0_partition.device_id, _hyper_1_1_0_partition.series_0, _hyper_1_1_0_partition.series_1, _hyper_1_1_0_partition.series_2, _hyper_1_1_0_partition.series_bool
   ->  Seq Scan on "testNs"._hyper_1_1_0_1_data
         Output: _hyper_1_1_0_1_data."timeCustom", _hyper_1_1_0_1_data.device_id, _hyper_1_1_0_1_data.series_0, _hyper_1_1_0_1_data.series_1, _hyper_1_1_0_1_data.series_2, _hyper_1_1_0_1_data.series_bool
   ->  Seq Scan on "testNs"._hyper_1_1_0_2_data
         Output: _hyper_1_1_0_2_data."timeCustom", _hyper_1_1_0_2_data.device_id, _hyper_1_1_0_2_data.series_0, _hyper_1_1_0_2_data.series_1, _hyper_1_1_0_2_data.series_2, _hyper_1_1_0_2_data.series_bool
(9 rows)

\echo "The following queries should NOT scan testNs._hyper_1_1_0_partition"
"The following queries should NOT scan testNs._hyper_1_1_0_partition"
EXPLAIN (verbose ON, costs off) SELECT * FROM PUBLIC."testNs" WHERE device_id = 'dev20';
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  Seq Scan on "testNs"._hyper_1_0_replica
         Output: _hyper_1_0_replica."timeCustom", _hyper_1_0_replica.device_id, _hyper_1_0_replica.series_0, _hyper_1_0_replica.series_1, _hyper_1_0_replica.series_2, _hyper_1_0_replica.series_bool
         Filter: ((_hyper_1_0_replica.device_id = 'dev20'::text) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_0_replica.device_id, 32768) = '28646'::smallint))
   ->  Seq Scan on "testNs"._hyper_1_1_0_partition
         Output: _hyper_1_1_0_partition."timeCustom", _hyper_1_1_0_partition.device_id, _hyper_1_1_0_partition.series_0, _hyper_1_1_0_partition.series_1, _hyper_1_1_0_partition.series_2, _hyper_1_1_0_partition.series_bool
         Filter: ((_hyper_1_1_0_partition.device_id = 'dev20'::text) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_partition.device_id, 32768) = '28646'::smallint))
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_1_data
         Output: _hyper_1_1_0_1_data."timeCustom", _hyper_1_1_0_1_data.device_id, _hyper_1_1_0_1_data.series_0, _hyper_1_1_0_1_data.series_1, _hyper_1_1_0_1_data.series_2, _hyper_1_1_0_1_data.series_bool
         Recheck Cond: (_hyper_1_1_0_1_data.device_id = 'dev20'::text)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_1_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "1-testNs_device_id_timeCustom_idx"
               Index Cond: (_hyper_1_1_0_1_data.device_id = 'dev20'::text)
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_2_data
         Output: _hyper_1_1_0_2_data."timeCustom", _hyper_1_1_0_2_data.device_id, _hyper_1_1_0_2_data.series_0, _hyper_1_1_0_2_data.series_1, _hyper_1_1_0_2_data.series_2, _hyper_1_1_0_2_data.series_bool
         Recheck Cond: (_hyper_1_1_0_2_data.device_id = 'dev20'::text)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_2_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "6-testNs_device_id_timeCustom_idx"
               Index Cond: (_hyper_1_1_0_2_data.device_id = 'dev20'::text)
(19 rows)

EXPLAIN (verbose ON, costs off) SELECT * FROM PUBLIC."testNs" WHERE device_id = 'dev'||'20';
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  Seq Scan on "testNs"._hyper_1_0_replica
         Output: _hyper_1_0_replica."timeCustom", _hyper_1_0_replica.device_id, _hyper_1_0_replica.series_0, _hyper_1_0_replica.series_1, _hyper_1_0_replica.series_2, _hyper_1_0_replica.series_bool
         Filter: ((_hyper_1_0_replica.device_id = 'dev20'::text) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_0_replica.device_id, 32768) = '28646'::smallint))
   ->  Seq Scan on "testNs"._hyper_1_1_0_partition
         Output: _hyper_1_1_0_partition."timeCustom", _hyper_1_1_0_partition.device_id, _hyper_1_1_0_partition.series_0, _hyper_1_1_0_partition.series_1, _hyper_1_1_0_partition.series_2, _hyper_1_1_0_partition.series_bool
         Filter: ((_hyper_1_1_0_partition.device_id = 'dev20'::text) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_partition.device_id, 32768) = '28646'::smallint))
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_1_data
         Output: _hyper_1_1_0_1_data."timeCustom", _hyper_1_1_0_1_data.device_id, _hyper_1_1_0_1_data.series_0, _hyper_1_1_0_1_data.series_1, _hyper_1_1_0_1_data.series_2, _hyper_1_1_0_1_data.series_bool
         Recheck Cond: (_hyper_1_1_0_1_data.device_id = 'dev20'::text)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_1_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "1-testNs_device_id_timeCustom_idx"
               Index Cond: (_hyper_1_1_0_1_data.device_id = 'dev20'::text)
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_2_data
         Output: _hyper_1_1_0_2_data."timeCustom", _hyper_1_1_0_2_data.device_id, _hyper_1_1_0_2_data.series_0, _hyper_1_1_0_2_data.series_1, _hyper_1_1_0_2_data.series_2, _hyper_1_1_0_2_data.series_bool
         Recheck Cond: (_hyper_1_1_0_2_data.device_id = 'dev20'::text)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_2_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "6-testNs_device_id_timeCustom_idx"
               Index Cond: (_hyper_1_1_0_2_data.device_id = 'dev20'::text)
(19 rows)

EXPLAIN (verbose ON, costs off) SELECT * FROM PUBLIC."testNs" WHERE 'dev'||'20' = device_id;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  Seq Scan on "testNs"._hyper_1_0_replica
         Output: _hyper_1_0_replica."timeCustom", _hyper_1_0_replica.device_id, _hyper_1_0_replica.series_0, _hyper_1_0_replica.series_1, _hyper_1_0_replica.series_2, _hyper_1_0_replica.series_bool
         Filter: (('dev20'::text = _hyper_1_0_replica.device_id) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_0_replica.device_id, 32768) = '28646'::smallint))
   ->  Seq Scan on "testNs"._hyper_1_1_0_partition
         Output: _hyper_1_1_0_partition."timeCustom", _hyper_1_1_0_partition.device_id, _hyper_1_1_0_partition.series_0, _hyper_1_1_0_partition.series_1, _hyper_1_1_0_partition.series_2, _hyper_1_1_0_partition.series_bool
         Filter: (('dev20'::text = _hyper_1_1_0_partition.device_id) AND (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_partition.device_id, 32768) = '28646'::smallint))
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_1_data
         Output: _hyper_1_1_0_1_data."timeCustom", _hyper_1_1_0_1_data.device_id, _hyper_1_1_0_1_data.series_0, _hyper_1_1_0_1_data.series_1, _hyper_1_1_0_1_data.series_2, _hyper_1_1_0_1_data.series_bool
         Recheck Cond: ('dev20'::text = _hyper_1_1_0_1_data.device_id)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_1_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "1-testNs_device_id_timeCustom_idx"
               Index Cond: ('dev20'::text = _hyper_1_1_0_1_data.device_id)
   ->  Bitmap Heap Scan on "testNs"._hyper_1_1_0_2_data
         Output: _hyper_1_1_0_2_data."timeCustom", _hyper_1_1_0_2_data.device_id, _hyper_1_1_0_2_data.series_0, _hyper_1_1_0_2_data.series_1, _hyper_1_1_0_2_data.series_2, _hyper_1_1_0_2_data.series_bool
         Recheck Cond: ('dev20'::text = _hyper_1_1_0_2_data.device_id)
         Filter: (_iobeamdb_catalog.get_partition_for_key(_hyper_1_1_0_2_data.device_id, 32768) = '28646'::smallint)
         ->  Bitmap Index Scan on "6-testNs_device_id_timeCustom_idx"
               Index Cond: ('dev20'::text = _hyper_1_1_0_2_data.device_id)
(19 rows)

--TODO: handle this later?
--EXPLAIN (verbose ON, costs off) SELECT * FROM "testNs" WHERE device_id IN ('dev20', 'dev21');
