\c meta
SELECT add_cluster_user('postgres', NULL);
 add_cluster_user 
------------------
 
(1 row)

SELECT add_node('Test1' :: NAME, 'localhost');
 add_node 
----------
 
(1 row)

SELECT add_node('test2' :: NAME, 'localhost');
 add_node 
----------
 
(1 row)

SELECT add_namespace('testNs' :: NAME);
 add_namespace 
---------------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'Device_id', 'text', TRUE, TRUE, ARRAY['TIME-VALUE'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'temp', 'double precision', FALSE, FALSE, ARRAY['VALUE-TIME'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'occupied', 'boolean', FALSE, FALSE, ARRAY[] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'latitude', 'bigint', FALSE, FALSE, ARRAY[] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_and_on_and_on', 'bigint', FALSE, FALSE, ARRAY['TIME-VALUE','VALUE-TIME'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT *
FROM node;
 database_name | schema_name  | server_name | hostname  
---------------+--------------+-------------+-----------
 Test1         | remote_Test1 | Test1       | localhost
 test2         | remote_test2 | test2       | localhost
(2 rows)

SELECT *
FROM namespace;
  name  | schema_name | cluster_table_name | cluster_distinct_table_name 
--------+-------------+--------------------+-----------------------------
 testNs | testNs      | cluster            | distinct
(1 row)

SELECT *
FROM namespace_node;
 namespace_name | database_name | master_table_name | remote_table_name | distinct_local_table_name | distinct_remote_table_name 
----------------+---------------+-------------------+-------------------+---------------------------+----------------------------
 testNs         | Test1         | master            | remote_Test1      | local_distinct            | remote_distinct_Test1
 testNs         | test2         | master            | remote_test2      | local_distinct            | remote_distinct_test2
(2 rows)

SELECT *
FROM field;
 namespace_name |                              name                               |    data_type     | is_partitioning | is_distinct |       index_types       
----------------+-----------------------------------------------------------------+------------------+-----------------+-------------+-------------------------
 testNs         | Device_id                                                       | text             | t               | t           | {TIME-VALUE}
 testNs         | temp                                                            | double precision | f               | f           | {VALUE-TIME}
 testNs         | occupied                                                        | boolean          | f               | f           | {}
 testNs         | latitude                                                        | bigint           | f               | f           | {}
 testNs         | really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           | f               | f           | {TIME-VALUE,VALUE-TIME}
(5 rows)

\c Test1
SELECT *
FROM node;
 database_name | schema_name  | server_name | hostname  
---------------+--------------+-------------+-----------
 Test1         | remote_Test1 | Test1       | localhost
 test2         | remote_test2 | test2       | localhost
(2 rows)

SELECT *
FROM namespace;
  name  | schema_name | cluster_table_name | cluster_distinct_table_name 
--------+-------------+--------------------+-----------------------------
 testNs | testNs      | cluster            | distinct
(1 row)

SELECT *
FROM namespace_node;
 namespace_name | database_name | master_table_name | remote_table_name | distinct_local_table_name | distinct_remote_table_name 
----------------+---------------+-------------------+-------------------+---------------------------+----------------------------
 testNs         | Test1         | master            | remote_Test1      | local_distinct            | remote_distinct_Test1
 testNs         | test2         | master            | remote_test2      | local_distinct            | remote_distinct_test2
(2 rows)

SELECT *
FROM field;
 namespace_name |                              name                               |    data_type     | is_partitioning | is_distinct |       index_types       
----------------+-----------------------------------------------------------------+------------------+-----------------+-------------+-------------------------
 testNs         | Device_id                                                       | text             | t               | t           | {TIME-VALUE}
 testNs         | temp                                                            | double precision | f               | f           | {VALUE-TIME}
 testNs         | occupied                                                        | boolean          | f               | f           | {}
 testNs         | latitude                                                        | bigint           | f               | f           | {}
 testNs         | really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           | f               | f           | {TIME-VALUE,VALUE-TIME}
(5 rows)

\dt "testNs".*
             List of relations
 Schema |      Name      | Type  |  Owner   
--------+----------------+-------+----------
 testNs | cluster        | table | postgres
 testNs | distinct       | table | postgres
 testNs | local_distinct | table | postgres
 testNs | master         | table | postgres
(4 rows)

\det "testNs".*
         List of foreign tables
 Schema |         Table         | Server 
--------+-----------------------+--------
 testNs | remote_distinct_test2 | test2
 testNs | remote_test2          | test2
(2 rows)

\d+ "testNs".distinct
                            Table "testNs.distinct"
      Column      |  Type  | Modifiers | Storage  | Stats target | Description 
------------------+--------+-----------+----------+--------------+-------------
 field            | text   | not null  | extended |              | 
 value            | text   | not null  | extended |              | 
 last_time_approx | bigint |           | plain    |              | 
Indexes:
    "distinct_pkey" PRIMARY KEY, btree (field, value)
Child tables: "testNs".local_distinct,
              "testNs".remote_distinct_test2

\d+ "testNs".cluster
                                                         Table "testNs.cluster"
                             Column                              |       Type       | Modifiers | Storage  | Stats target | Description 
-----------------------------------------------------------------+------------------+-----------+----------+--------------+-------------
 time                                                            | bigint           | not null  | plain    |              | 
 Device_id                                                       | text             |           | extended |              | 
 temp                                                            | double precision |           | plain    |              | 
 occupied                                                        | boolean          |           | plain    |              | 
 latitude                                                        | bigint           |           | plain    |              | 
 really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           |           | plain    |              | 
Child tables: "testNs".master,
              "testNs".remote_test2

--test idempotence
\c meta
SELECT add_namespace('testNs' :: NAME);
 add_namespace 
---------------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'Device_id', 'text', TRUE, TRUE, ARRAY['TIME-VALUE'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'temp', 'double precision', FALSE, FALSE, ARRAY['VALUE-TIME'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'occupied', 'boolean', FALSE, FALSE, ARRAY[] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'latitude', 'bigint', FALSE, FALSE, ARRAY[] :: field_index_type []);
 add_field 
-----------
 
(1 row)

SELECT add_field('testNs' :: NAME, 'really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_and_on_and_on', 'bigint', FALSE, FALSE, ARRAY['TIME-VALUE','VALUE-TIME'] :: field_index_type []);
 add_field 
-----------
 
(1 row)

\c Test1
\d+ "testNs".cluster
                                                         Table "testNs.cluster"
                             Column                              |       Type       | Modifiers | Storage  | Stats target | Description 
-----------------------------------------------------------------+------------------+-----------+----------+--------------+-------------
 time                                                            | bigint           | not null  | plain    |              | 
 Device_id                                                       | text             |           | extended |              | 
 temp                                                            | double precision |           | plain    |              | 
 occupied                                                        | boolean          |           | plain    |              | 
 latitude                                                        | bigint           |           | plain    |              | 
 really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           |           | plain    |              | 
Child tables: "testNs".master,
              "testNs".remote_test2

SELECT get_or_create_data_table((1477075243*1e9)::bigint, 'testNs'::NAME, 0::SMALLINT, 10::SMALLINT);
                            get_or_create_data_table                            
--------------------------------------------------------------------------------
 ("""testNs"".data_0_10_1477008000",testNs,0,10,Device_id,1477008000000000000,)
(1 row)

\dt "testNs".*
                List of relations
 Schema |         Name         | Type  |  Owner   
--------+----------------------+-------+----------
 testNs | cluster              | table | postgres
 testNs | data_0_10_1477008000 | table | postgres
 testNs | distinct             | table | postgres
 testNs | local_distinct       | table | postgres
 testNs | master               | table | postgres
 testNs | partition_0_10       | table | postgres
(6 rows)

\det "testNs".*
         List of foreign tables
 Schema |         Table         | Server 
--------+-----------------------+--------
 testNs | remote_distinct_test2 | test2
 testNs | remote_test2          | test2
(2 rows)

\d+ "testNs".data_0_10_1477008000
                                                  Table "testNs.data_0_10_1477008000"
                             Column                              |       Type       | Modifiers | Storage  | Stats target | Description 
-----------------------------------------------------------------+------------------+-----------+----------+--------------+-------------
 time                                                            | bigint           | not null  | plain    |              | 
 Device_id                                                       | text             |           | extended |              | 
 temp                                                            | double precision |           | plain    |              | 
 occupied                                                        | boolean          |           | plain    |              | 
 latitude                                                        | bigint           |           | plain    |              | 
 really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           |           | plain    |              | 
Indexes:
    "1-time-Device_id" btree ("time" DESC NULLS LAST, "Device_id") WHERE "Device_id" IS NOT NULL
    "2-temp-time" btree (temp, "time" DESC NULLS LAST) WHERE temp IS NOT NULL
    "3-time-really_long_field_goes_on_and_on_and_on_and_on_and_on_an" btree ("time" DESC NULLS LAST, really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an) WHERE really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an IS NOT NULL
    "4-really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_" btree (really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an, "time" DESC NULLS LAST) WHERE really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an IS NOT NULL
    "data_0_10_1477008000_pidx" btree ("time" DESC NULLS LAST, "Device_id")
Check constraints:
    "partition" CHECK (get_partition_for_key("Device_id", '10'::smallint) = '0'::smallint)
    "time_range" CHECK ("time" >= '1477008000000000000'::bigint AND "time" <= NULL::bigint)
Inherits: "testNs".partition_0_10

\d+ "testNs".partition_0_10
                                                     Table "testNs.partition_0_10"
                             Column                              |       Type       | Modifiers | Storage  | Stats target | Description 
-----------------------------------------------------------------+------------------+-----------+----------+--------------+-------------
 time                                                            | bigint           | not null  | plain    |              | 
 Device_id                                                       | text             |           | extended |              | 
 temp                                                            | double precision |           | plain    |              | 
 occupied                                                        | boolean          |           | plain    |              | 
 latitude                                                        | bigint           |           | plain    |              | 
 really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           |           | plain    |              | 
Check constraints:
    "partition" CHECK (get_partition_for_key("Device_id", '10'::smallint) = '0'::smallint)
Inherits: "testNs".master
Child tables: "testNs".data_0_10_1477008000

SELECT close_data_table_end('"testNs".data_0_10_1477008000');
 close_data_table_end 
----------------------
 
(1 row)

\d+ "testNs".data_0_10_1477008000
                                                  Table "testNs.data_0_10_1477008000"
                             Column                              |       Type       | Modifiers | Storage  | Stats target | Description 
-----------------------------------------------------------------+------------------+-----------+----------+--------------+-------------
 time                                                            | bigint           | not null  | plain    |              | 
 Device_id                                                       | text             |           | extended |              | 
 temp                                                            | double precision |           | plain    |              | 
 occupied                                                        | boolean          |           | plain    |              | 
 latitude                                                        | bigint           |           | plain    |              | 
 really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an | bigint           |           | plain    |              | 
Indexes:
    "1-time-Device_id" btree ("time" DESC NULLS LAST, "Device_id") WHERE "Device_id" IS NOT NULL
    "2-temp-time" btree (temp, "time" DESC NULLS LAST) WHERE temp IS NOT NULL
    "3-time-really_long_field_goes_on_and_on_and_on_and_on_and_on_an" btree ("time" DESC NULLS LAST, really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an) WHERE really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an IS NOT NULL
    "4-really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_" btree (really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an, "time" DESC NULLS LAST) WHERE really_long_field_goes_on_and_on_and_on_and_on_and_on_and_on_an IS NOT NULL
    "data_0_10_1477008000_pidx" btree ("time" DESC NULLS LAST, "Device_id")
Check constraints:
    "partition" CHECK (get_partition_for_key("Device_id", '10'::smallint) = '0'::smallint)
    "time_range" CHECK ("time" >= '1477008000000000000'::bigint AND "time" <= '1477094399999999999'::bigint)
Inherits: "testNs".partition_0_10

SELECT get_or_create_data_table((1477075243*1e9)::bigint, 'testNs'::NAME, 0::SMALLINT, 10::SMALLINT);
                                     get_or_create_data_table                                      
---------------------------------------------------------------------------------------------------
 ("""testNs"".data_0_10_1477008000",testNs,0,10,Device_id,1477008000000000000,1477094399999999999)
(1 row)

\dt "testNs".*
                List of relations
 Schema |         Name         | Type  |  Owner   
--------+----------------------+-------+----------
 testNs | cluster              | table | postgres
 testNs | data_0_10_1477008000 | table | postgres
 testNs | distinct             | table | postgres
 testNs | local_distinct       | table | postgres
 testNs | master               | table | postgres
 testNs | partition_0_10       | table | postgres
(6 rows)

SELECT get_or_create_data_table(((1477075243+(60*60*25))*1e9)::bigint, 'testNs'::NAME, 0::SMALLINT, 10::SMALLINT);
                            get_or_create_data_table                            
--------------------------------------------------------------------------------
 ("""testNs"".data_0_10_1477094400",testNs,0,10,Device_id,1477094400000000000,)
(1 row)

\dt "testNs".*
                List of relations
 Schema |         Name         | Type  |  Owner   
--------+----------------------+-------+----------
 testNs | cluster              | table | postgres
 testNs | data_0_10_1477008000 | table | postgres
 testNs | data_0_10_1477094400 | table | postgres
 testNs | distinct             | table | postgres
 testNs | local_distinct       | table | postgres
 testNs | master               | table | postgres
 testNs | partition_0_10       | table | postgres
(7 rows)

